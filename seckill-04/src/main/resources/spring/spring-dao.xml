<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
       
     <!-- 配置整合mybatis过程 -->
     <!-- 配置数据库相关参数 -->   
     <context:property-placeholder location="classpath:jdbc.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"        
     	destroy-method="close">    
     	<!-- 配置C3P0连接池属性 -->   
        <property name="driverClass" value="${driver}"/>       
        <property name="jdbcUrl" value="${url}"/>       
        <property name="user" value="${user}"/>       
        <property name="password" value="${password}"/>   
	    <!-- 连接池的私有属性 -->     
	    <property name="maxPoolSize" value="30"></property>
	    <property name="minPoolSize" value="10"></property>
	    <!-- 关闭连接后不自动commit -->
	    <property name="autoCommitOnClose" value="false"></property>
	    <!-- 获取连接超时时间 -->
	    <property name="checkoutTimeout" value="1000"></property>
	    <!-- 当获取连接失败重试次数 -->
	    <property name="acquireRetryAttempts" value="2"></property>
	</bean>  
	
	<!-- 配置sqlsessionFactory对象 -->    
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <!-- 注入数据库连接池 -->
	   <property name="dataSource" ref="dataSource"></property>
	   <!-- 配置mybatis全局配置文件：mybatis-config.xml -->
	   <property name="configLocation" value="classpath:mybatis-config.xml"></property>
	   <!-- 扫描entiy包，使用别名 , 多个package之间可以用逗号或者分号等来进行分隔-->
	   <property name="typeAliasesPackage" value="org.seckill.entiy"></property>
	   <!-- 扫描sql配置文件：mappers.xml 
	                    它表示我们的Mapper文件存放的位置，
	                    当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值
	    -->
	   <property name="mapperLocations" value="classpath:mappers/*.xml"></property>
	</bean>
	
	<!-- 配置扫描Dao接口包，动态实现DAO接口，注入spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <!-- 为什么使用sqlSessionFactoryBeanName而不是sqlSessionFactory
	                        注入sqlSessionFactory，后面的value是SqlSessionFactory的bean的名字，
	                        也就是sqlSessionFactory的id当我们的mapperscannerconfigurer启动的时候，
	                        可能会出现我们的jdbc.properties文件未被加载，
	                        这样的话它拿到的DataSource就是错误的，
	                        因为像${jdbc.url}这类的属性还没有被替换掉，所以通过BeanName后处理的方式，
	                        当我们去用我们的Mybatis的时候，它才会去找我们对应的sqlSessionFactory，
	                        为了防止它提前初始化我们的sqlSessionFactory
	    -->
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	    <!-- 给出需要扫描DAO的接口包 -->
	    <property name="basePackage" value="org.seckill.dao"></property>
	</bean>
	
	<!-- RedisDao 需要自行注入，与mybatis无关-->
	<bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
	    <constructor-arg index="0" value="localhost"></constructor-arg>
	    <constructor-arg index="1" value="6379"></constructor-arg>
	</bean>
</beans>